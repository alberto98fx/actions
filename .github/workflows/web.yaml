name: "Web and blog Build with Docker Kaniko"

on:
  workflow_call:
    inputs:
      APP_ENV:
        required: false
        type: string
        default: "staging"
      DOCKERFILE:
        required: false
        type: string
        default: "Dockerfile"

permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  build:
    outputs:
      IMAGE_TAG: ${{ steps.IMAGE_TAG.outputs.IMAGE_TAG }}
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Skip Duplicate Actions
        uses: fkirc/skip-duplicate-actions@v5.2.0
        with:
          concurrent_skipping: "same_content"
          cancel_others: "true"
          
      - name: Check out code
        uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '18.12.1'

      - name: Login to NPM 
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc
        
      - name: [WEB] Cache yarn modules
        if: github.repository == 'web-service-main'
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            public
          key: ${{ runner.os }}-${{ inputs.APP_ENV }}-build-web-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.APP_ENV }}-build-web-

      - name: [WEB] Install deps
        if: github.repository == 'web-service-main'
        run: yarn install

      - name: [WEB BLOG] Cache yarn modules
        if: github.repository == 'web-blog'
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            public
            .cache
          key: ${{ runner.os }}-${{ inputs.APP_ENV }}-build-web-blog-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.APP_ENV }}-build-web-blog-

      - name: [WEB BLOG] Install deps
        if: github.repository == 'web-blog'
        run: yarn install --production=false

      - name: Build
        run: yarn build
        env:
          NODE_ENV: "production"
          CI: false
          APP_ENV: "${{ inputs.APP_ENV }}"
          GATSBY_APP_ENV: "${{ inputs.APP_ENV }}"

      - name: [WEB BLOG] Compress Artifacts
        if: github.repository == 'web-blog'
        run: |
          cp Docker/sitemap-index-blog.xml public/
          tar -czf public.tar.gz public

      - name: [WEB] Compress Artifacts
        if: github.repository == 'web-service-main'
        run: |
          tar -czf public.tar.gz dist

  docker:
    needs: build
    if: contains(github.ref, 'refs/tags/') || contains(github.ref, 'refs/pull/')
    permissions:
      id-token: write
      contents: read
      actions: write
    uses: freeletics/actions/.github/workflows/docker.yaml@main #this has to be public
    with:
      ARTIFACTS_NAME: "public"
      ARTIFACTS_COMPRESSED: true
      DOCKERFILE: "Dockerfile.gha"
      AWS_REGION: "eu-west-1"
      AWS_ACCOUNT_ID: "524690225562"
    secrets: inherit

  integration:
    if: contains(github.ref, 'refs/heads/') && inputs.APP_ENV != 'qa'
    needs: build
    permissions:
      id-token: write
      contents: read
      actions: write
    uses: freeletics/actions/.github/workflows/gha-auto-deploy-integration.yaml@main
    with:
      ARTIFACTS_NAME: "public"
      ARTIFACTS_COMPRESSED: true
      DOCKERFILE: "Dockerfile.gha"
      AWS_REGION: "eu-west-1"
      AWS_ACCOUNT_ID: "524690225562"
    secrets: inherit
    
  qa:
    if: contains(github.ref, 'refs/heads/') && inputs.APP_ENV == 'qa'
    needs: build
    permissions:
      id-token: write
      contents: read
      actions: write
    uses: freeletics/actions/.github/workflows/web-qa.yaml@main
    with:
      ARTIFACTS_NAME: "public"
      ARTIFACTS_COMPRESSED: true
      DOCKERFILE: "Dockerfile.gha"
      AWS_REGION: "eu-west-1"
      AWS_ACCOUNT_ID: "524690225562"
    secrets: inherit
