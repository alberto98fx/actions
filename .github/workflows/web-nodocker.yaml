name: "Web No docker Build"

on:
  workflow_call:
    inputs:
      env_name:
        type: string
        required: false
      AWS_ECR_ENV_NAME:
        required: false
        type: string
        default: "prod"
      AWS_REGION:
        required: true
        type: string
      AWS_ACCOUNT_ID:
        required: true
        type: string
      APP_ENV:
        required: false
        type: string
        default: "staging"
      DOCKERFILE:
        required: false
        type: string
        default: "Dockerfile"

permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Skip Duplicate Actions
        uses: fkirc/skip-duplicate-actions@v5.2.0
        with:
          concurrent_skipping: "same_content"
          cancel_others: "true"

      - name: Check out code
        uses: actions/checkout@v3

      - name: Cache yarn modules
        id: cache-yarn
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            public
          key: ${{ runner.os }}-build-web-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-build-web-

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '18.12.1'

      - name: Login to NPM 
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc

      - name: Install deps
        run: yarn install
          
      - name: Build
        run: yarn build
        env:
          NODE_ENV: "production"

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1.7.0
      #   with:
      #     role-to-assume: arn:aws:iam::${{ inputs.AWS_ACCOUNT_ID }}:role/github-actions/fl-${{ inputs.AWS_ECR_ENV_NAME }}-${{ github.event.repository.name }}
      #     aws-region: ${{ inputs.AWS_REGION }}

      # - name: Login to Amazon ECR Private
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1.5.3

      # - name: Get Today's Unix timestamp
      #   id: timestamp
      #   run: echo "date=$(date +'%s')" >> $GITHUB_OUTPUT

      #   # for tag we use gha-prod
      #   # for intgration get a new image tag with date of today; then a webhook will notify Flux of changes
      # - uses: docker/metadata-action@v4.1.1
      #   name: Generate tags
      #   id: metadata
      #   with:
      #     images: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ github.event.repository.name }}
      #     tags: |
      #       type=sha,enable=true,priority=600,prefix=gha-,suffix=
      #       type=ref,enable=true,priority=600,prefix=gha-latest-,suffix=,event=branch
      #       type=ref,enable=true,priority=600,prefix=gha-deploy-prod-,suffix=,event=tag
      #       type=ref,enable=true,priority=600,prefix=gha-,suffix=,event=pr

      # - uses: int128/kaniko-action@v1.14.0
      #   name: Build with Kaniko
      #   with:
      #     push: true
      #     tags: ${{ steps.metadata.outputs.tags }}
      #     labels: ${{ steps.metadata.outputs.labels }}
      #     cache: true
      #     file: "${{ inputs.DOCKERFILE }}"
      #     build-args: |
      #       APP_ENV=${{ inputs.APP_ENV }}
      #       NPM_TOKEN="${{ secrets.NPM_TOKEN }}"
      #     cache-repository: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/kaniko-cache
